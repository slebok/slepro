symbol class : visible x abstract x name x tpara* x extends x member* -> decl ;
symbol enum : visible x name x name+ -> decl ;
symbol public : -> visible ;
symbol protected : -> visible ;
symbol private : -> visible ;
type abstract = boolean ;
type name = atom ;
type tpara = name ;
type extends = type? ;
symbol constr : visible x mpara* x statement* -> member ;
symbol method : visible x time x type x name x mpara* x statement* -> member ;
symbol assignment : expression x expression -> statement ;
symbol expression : expression -> statement ;
symbol this : -> expression ;
symbol null : -> expression ;
symbol name : name -> expression ;
symbol select : expression x name -> expression ;
symbol call : name x expression* -> expression ;
type mpara = (type, name) ;
symbol typename : name -> type ;
symbol typeapp : name x type* -> type ;
