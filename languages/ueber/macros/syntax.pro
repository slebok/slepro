% Reusable pattern of concrete and abstract syntax definition
syntax(Lang) :-
  TextLang =.. [Lang, text],
  TermLang =.. [Lang, term],
  declare(language(TextLang)),
  declare(language(TermLang)),
  ConSyn = ['cs.term', 'ls.term'],
  AbsSyn = ['as.term'],
  atom_concat(Lang, 'Mapping', Mapping),
  declare(membership(TextLang, eglAcceptor(Mapping), ConSyn)),
  declare(membership(TermLang, eslChecker, AbsSyn)),
  declare(function(parser, [TextLang], [TermLang], eglParser(Mapping), ConSyn)),
  declare(elementOf('cs.egl', egl(text))),
  declare(elementOf('cs.term', egl(term))),
  declare(elementOf('ls.egl', egl(text))),
  declare(elementOf('ls.term', egl(term))),
  declare(elementOf('as.esl', esl(text))),
  declare(elementOf('as.term', esl(term))),
  declare(mapsTo(parser, ['cs.egl'], ['cs.term'])),
  declare(mapsTo(parser, ['ls.egl'], ['ls.term'])),
  declare(mapsTo(parser, ['as.esl'], ['as.term'])).
